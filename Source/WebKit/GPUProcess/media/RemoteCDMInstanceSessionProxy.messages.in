/*
 * Copyright (C) 2020 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#if ENABLE(GPU_PROCESS) && ENABLE(ENCRYPTED_MEDIA)

[
    DispatchedFrom=WebContent,
    DispatchedTo=GPU,
    EnabledBy=EncryptedMediaAPIEnabled
]
messages -> RemoteCDMInstanceSessionProxy {
    SetLogIdentifier(uint64_t logIdentifier)
    RequestLicense(enum:uint8_t WebCore::CDMSessionType type, enum:bool WebCore::CDMKeyGroupingStrategy keyGroupingStrategy, AtomString initDataType, RefPtr<WebCore::SharedBuffer> initData) -> (RefPtr<WebCore::SharedBuffer> message, String sessionId, bool needsIndividualization, bool succeeded)
    UpdateLicense(String sessionId, enum:uint8_t WebCore::CDMSessionType type, RefPtr<WebCore::SharedBuffer> response) -> (bool sessionWasClosed, std::optional<Vector<std::pair<Ref<WebCore::SharedBuffer>, WebCore::CDMKeyStatus>>> changedKeys, std::optional<double> changedExpiration, std::optional<std::pair<WebCore::CDMMessageType, Ref<WebCore::SharedBuffer>>> message, bool succeeded)
    LoadSession(enum:uint8_t WebCore::CDMSessionType type, String sessionId, String origin) -> (std::optional<Vector<std::pair<Ref<WebCore::SharedBuffer>, WebCore::CDMKeyStatus>>> changedKeys, std::optional<double> changedExpiration, std::optional<std::pair<WebCore::CDMMessageType, Ref<WebCore::SharedBuffer>>> message, bool succeeded, enum:uint8_t WebCore::CDMInstanceSessionLoadFailure loadFailure)
    CloseSession(String sessionId) -> ()
    RemoveSessionData(String sessionId, enum:uint8_t WebCore::CDMSessionType type) -> (Vector<std::pair<Ref<WebCore::SharedBuffer>, WebCore::CDMKeyStatus>> changedKeys, RefPtr<WebCore::SharedBuffer> message, bool succeeded)
    StoreRecordOfKeyUsage(String sessionId)
}

#endif
