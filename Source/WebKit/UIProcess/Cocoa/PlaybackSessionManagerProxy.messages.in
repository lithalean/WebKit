# Copyright (C) 2016-2022 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if PLATFORM(IOS_FAMILY) || (PLATFORM(MAC) && ENABLE(VIDEO_PRESENTATION_MODE))
[
    EnabledBy=VideoPresentationManagerEnabled || VideoPresentationModeAPIEnabled,
    SharedPreferencesNeedsConnection,
    DispatchedFrom=WebContent,
    DispatchedTo=UI
]
messages -> PlaybackSessionManagerProxy {
    CurrentTimeChanged(WebCore::MediaPlayerClientIdentifier contextId, double currentTime, double hostTime)
    BufferedTimeChanged(WebCore::MediaPlayerClientIdentifier contextId, double bufferedTime)
    SeekableRangesVectorChanged(WebCore::MediaPlayerClientIdentifier contextId, WebCore::PlatformTimeRanges ranges, double lastModifiedTime, double liveUpdateInterval)
    CanPlayFastReverseChanged(WebCore::MediaPlayerClientIdentifier contextId, bool value)
    AudioMediaSelectionOptionsChanged(WebCore::MediaPlayerClientIdentifier contextId, Vector<WebCore::MediaSelectionOption> options, uint64_t selectedIndex)
    LegibleMediaSelectionOptionsChanged(WebCore::MediaPlayerClientIdentifier contextId, Vector<WebCore::MediaSelectionOption> options, uint64_t selectedIndex)
    AudioMediaSelectionIndexChanged(WebCore::MediaPlayerClientIdentifier contextId, uint64_t selectedIndex)
    LegibleMediaSelectionIndexChanged(WebCore::MediaPlayerClientIdentifier contextId, uint64_t selectedIndex)
    ExternalPlaybackPropertiesChanged(WebCore::MediaPlayerClientIdentifier contextId, bool enabled, enum:uint8_t WebCore::PlaybackSessionModelExternalPlaybackTargetType targetType, String localizedDeviceName)
    WirelessVideoPlaybackDisabledChanged(WebCore::MediaPlayerClientIdentifier contextId, bool disabled)
    DurationChanged(WebCore::MediaPlayerClientIdentifier contextId, double duration)
    PlaybackStartedTimeChanged(WebCore::MediaPlayerClientIdentifier contextId, double playbackStartedTime)
    RateChanged(WebCore::MediaPlayerClientIdentifier contextId, OptionSet<WebCore::PlaybackSessionModelPlaybackState> playbackState, double rate, double defaultPlaybackRate)
    MutedChanged(WebCore::MediaPlayerClientIdentifier contextId, bool muted);
    VolumeChanged(WebCore::MediaPlayerClientIdentifier contextId, double volume);
    PictureInPictureSupportedChanged(WebCore::MediaPlayerClientIdentifier contextId, bool pictureInPictureSupported)
    IsInWindowFullscreenActiveChanged(WebCore::MediaPlayerClientIdentifier contextId, bool isInWindow)
#if HAVE(PIP_SKIP_PREROLL)
    CanSkipAdChanged(WebCore::MediaPlayerClientIdentifier contextId, bool value)
#endif
#if ENABLE(LINEAR_MEDIA_PLAYER)
    SupportsLinearMediaPlayerChanged(WebCore::MediaPlayerClientIdentifier contextId, bool supportsLinearMediaPlayer)
#endif
    SpatialVideoMetadataChanged(WebCore::MediaPlayerClientIdentifier contextId, struct std::optional<WebCore::SpatialVideoMetadata> metadata);
    VideoProjectionMetadataChanged(WebCore::MediaPlayerClientIdentifier contextId, struct std::optional<WebCore::VideoProjectionMetadata> metadata);
    SetUpPlaybackControlsManagerWithID(WebCore::MediaPlayerClientIdentifier contextId, bool isVideo)
    ClearPlaybackControlsManager()

    SwapFullscreenModes(WebCore::MediaPlayerClientIdentifier firstContextId, WebCore::MediaPlayerClientIdentifier secondContextId)

    HandleControlledElementIDResponse(WebCore::MediaPlayerClientIdentifier contextId, String id)

#if !RELEASE_LOG_DISABLED
    SetLogIdentifier(WebCore::MediaPlayerClientIdentifier contextId, uint64_t logIdentifier)
#endif
}
#endif
